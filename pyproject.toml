[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mapchete"
dynamic = ["version"]
description = "Tile-based geodata processing using rasterio & Fiona"
readme = "README.rst"
license = "MIT"
authors = [
    { name = "Joachim Ungar", email = "joachim.ungar@gmail.com" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: GIS",
]
dependencies = [
    "aiohttp",
    "cachetools",
    "click-plugins",
    "click-spinner",
    "click>=7.1.1",
    "dask",
    "distributed",
    "fiona>=1.8.13.post1",
    "fsspec",
    "geojson-pydantic",    
    "importlib-metadata",
    "importlib-resources",
    "numpy>=1.16,!=2.0.1",
    "oyaml",
    "pydantic>=2.3.0",
    "pydantic_settings>=2.0.0",
    "pyproj",
    "python-dateutil",
    "rasterio>1.2.10",
    "retry",
    "Shapely>=2.0.0",
    "tilematrix>=2022.12.0",
    "tqdm",
]

[project.optional-dependencies]
complete = [
    "aiohttp",
    "aiobotocore>=1.1.2",
    "boto3>=1.14.44",
    "dask",
    "distributed",
    "Flask<4.0.0",
    "Flask-RangeRequest",
    "fsspec[http,s3]>=2023.12.0",
    "lxml",
    "matplotlib<3.10",
    "memray",
    "pystac[urllib3]>=1.8.2",
    "requests",
    "rtree",
    "s3fs!=2023.9.0",
    "tilebench",
    "werkzeug>=0.15",
]
contours = [
    "matplotlib<3.10",
]
http = [
    "aiohttp",
    "fsspec[http]",
    "requests",
]
profiling = [
    "memray",
    "tilebench"
]
s3 = [
    "aiobotocore>=1.1.2",
    "boto3>=1.14.44",
    "fsspec[s3]",
    "s3fs!=2023.9.0",
]
serve = [
    "Flask<4.0.0",
    "Flask-RangeRequest",
    "werkzeug>=0.15",
]
spatial-index = [
    "rtree",
]
stac = [
    "pystac[urllib3]>=1.8.2",
    "pystac-client>=0.7.2",
]
vrt = [
    "lxml",
]

[project.scripts]
mapchete = "mapchete.cli.mapchete:main"
mpath = "mapchete.cli.mpath:mpath"

[project.entry-points."mapchete.cli.commands"]
convert = "mapchete.cli.mapchete.convert:convert"
cp = "mapchete.cli.mapchete.cp:cp"
create = "mapchete.cli.mapchete.create:create"
execute = "mapchete.cli.mapchete.execute:execute"
formats = "mapchete.cli.mapchete.formats:formats"
index = "mapchete.cli.mapchete.index:index"
processes = "mapchete.cli.mapchete.processes:processes"
rm = "mapchete.cli.mapchete.rm:rm"
serve = "mapchete.cli.mapchete.serve:serve"
stac = "mapchete.cli.mapchete.stac:stac"

[project.entry-points."mapchete.cli.mpath_commands"]
exists = "mapchete.cli.mpath.exists:exists"
cp = "mapchete.cli.mpath.cp:cp"
sync = "mapchete.cli.mpath.sync:sync"
rm = "mapchete.cli.mpath.rm:rm"
ls = "mapchete.cli.mpath.ls:ls"
read_text = "mapchete.cli.mpath.read_text:read_text"
read_json = "mapchete.cli.mpath.read_json:read_json"
read_yaml = "mapchete.cli.mpath.read_yaml:read_yaml"

[project.entry-points."mapchete.formats.drivers"]
flatgeobuf = "mapchete.formats.default.flatgeobuf"
geojson = "mapchete.formats.default.geojson"
gtiff = "mapchete.formats.default.gtiff"
mapchete_input = "mapchete.formats.default.mapchete_input"
png = "mapchete.formats.default.png"
png_hillshade = "mapchete.formats.default.png_hillshade"
raster_file = "mapchete.formats.default.raster_file"
tile_directory = "mapchete.formats.default.tile_directory"
vector_file = "mapchete.formats.default.vector_file"

[project.entry-points."mapchete.processes"]
contours = "mapchete.processes.contours"
convert = "mapchete.processes.convert"
example_process = "mapchete.processes.examples.example_process"
hillshade = "mapchete.processes.hillshade"

[project.urls]
Homepage = "https://github.com/ungarj/mapchete"

[tool.hatch.version]
path = "mapchete/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/mapchete",
]

[tool.ruff]
exclude = ["test/testdata/syntax_error.py"]